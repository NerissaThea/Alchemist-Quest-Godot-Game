extends Node2D

# üéØ Danh s√°ch PackedScene c√°c puzzle, g√°n trong Inspector
@export var puzzle_scenes: Array[PackedScene] = []

var current_puzzle_index: int = 0              # Th·ª© t·ª± puzzle hi·ªán t·∫°i
var current_puzzle: Node = null                # ƒê·ªëi t∆∞·ª£ng puzzle ƒëang ho·∫°t ƒë·ªông
var puzzle_completed_flags: Array[bool] = []   # Theo d√µi c√°c puzzle ƒë√£ ho√†n th√†nh

func _ready():
	# K·∫øt n·ªëi v√πng ph√°t hi·ªán ng∆∞·ªùi ch∆°i
	$DetectionArea.body_entered.connect(_on_detection_area_body_entered)
	$DetectionArea.body_exited.connect(_on_detection_area_body_exited)

	# Kh·ªüi t·∫°o m·∫£ng c·ªù ho√†n th√†nh
	puzzle_completed_flags.resize(puzzle_scenes.size())
	puzzle_completed_flags.fill(false)

func _on_detection_area_body_entered(body: Node):
	if body.name == "Player":
		body.nearby_workbench = self
		print("üë§ Ng∆∞·ªùi ch∆°i ƒë√£ v√†o v√πng t∆∞∆°ng t√°c.")

func _on_detection_area_body_exited(body: Node):
	if body.name == "Player":
		body.can_interact = false
		print("üëã Ng∆∞·ªùi ch∆°i ƒë√£ r·ªùi kh·ªèi v√πng t∆∞∆°ng t√°c.")

# üß© H√†m ƒë∆∞·ª£c g·ªçi t·ª´ Player khi nh·∫•n E
func open_puzzle_ui():
	# Ki·ªÉm tra n·∫øu ƒëang c√≤n puzzle ch∆∞a ho√†n th√†nh
	if current_puzzle != null and not puzzle_completed_flags[current_puzzle_index]:
		print("‚ö†Ô∏è Puzzle hi·ªán t·∫°i ch∆∞a ho√†n th√†nh.")
		return

	# N·∫øu ƒë√£ ho√†n t·∫•t m·ªçi puzzle
	if current_puzzle_index >= puzzle_scenes.size():
		print("‚úÖ T·∫•t c·∫£ c√°c puzzle ƒë√£ ho√†n th√†nh.")
		return

	_spawn_puzzle(current_puzzle_index)

# ‚öôÔ∏è T·∫°o v√† hi·ªÉn th·ªã puzzle theo ch·ªâ s·ªë
func _spawn_puzzle(index: int):
	# B·∫£o v·ªá: ki·ªÉm tra ch·ªâ s·ªë h·ª£p l·ªá v√† scene c√≥ t·ªìn t·∫°i
	if index < 0 or index >= puzzle_scenes.size():
		print("‚ùå Kh√¥ng t√¨m th·∫•y scene puzzle t·∫°i index ", index)
		return

	var puzzle_scene: PackedScene = puzzle_scenes[index]
	if puzzle_scene == null:
		print("‚ùå PackedScene t·∫°i index ", index, " l√† null.")
		return

	# D·ªçn puzzle c≈© n·∫øu c√≥
	if current_puzzle:
		current_puzzle.queue_free()
		current_puzzle = null

	# T·∫°o m·ªõi puzzle
	current_puzzle = puzzle_scene.instantiate()
	get_tree().current_scene.add_child(current_puzzle)

	# K·∫øt n·ªëi t√≠n hi·ªáu n·∫øu puzzle h·ªó tr·ª£
	if current_puzzle.has_signal("puzzle_solved"):
		current_puzzle.connect("puzzle_solved", Callable(self, "_on_puzzle_completed"))
	else:
		print("‚ö†Ô∏è Puzzle kh√¥ng ph√°t t√≠n hi·ªáu 'puzzle_solved'.")

	print("üß© Puzzle ", index + 1, " ƒë√£ ƒë∆∞·ª£c m·ªü.")

# ‚úÖ X·ª≠ l√Ω khi puzzle ho√†n th√†nh
func _on_puzzle_completed():
	print("üéâ Puzzle ", current_puzzle_index + 1, " ho√†n th√†nh.")
	puzzle_completed_flags[current_puzzle_index] = true
	current_puzzle_index += 1

	# D·ªçn d·∫πp puzzle kh·ªèi m√†n h√¨nh
	if current_puzzle:
		current_puzzle.queue_free()
		current_puzzle = null

	print("‚ñ∂Ô∏è S·∫µn s√†ng m·ªü puzzle ti·∫øp theo khi ng∆∞·ªùi ch∆°i nh·∫•n E.")
